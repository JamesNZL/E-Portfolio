{"version":3,"sources":["Components/GithubIntegration.tsx","Assets/Selfie.jpg","Components/HomePage/Header.tsx","Components/Utils/ExpandButton.tsx","Components/HomePage/Project.tsx","Components/Utils/SectionTitle.tsx","Components/HomePage/ProjectHighlights.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["gitProjects","Header","props","className","src","selfie","alt","target","rel","href","onClick","toggleTheme","ExpandButton","useState","initiallyExpanded","isExpanded","setIsExpanded","tooltipText","tooltipWidthClass","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Project","showTechnologies","state","setState","id","project","name","created","toLocaleString","month","year","description","technologies","length","map","technology","technologyIcons","link","emptyGitProject","Date","splitPascalCase","RegExp","integrationFilters","require","getTechnologies","gitProjectFilters","a","fetch","languages_url","response","ok","console","error","json","rawLanguages","Object","keys","forEach","language","ignoreLanguages","includes","push","toLowerCase","addTechnologies","fetchGitProjects","rawProjects","Promise","all","filter","ignoreProjects","ignoreForks","fork","projectFilters","appendDescription","languages","replaceAll","html_url","created_at","getGitProjects","sort","b","getTime","gitProject","SectionTitle","title","projectHighlights","ProjectHighlights","setGitProjects","useEffect","getProjects","projectName","App","setTheme","theme","localStorage","document","body","classList","remove","add","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.923e8695.chunk.js","sourcesContent":["export interface GitProject {\r\n    name: string;\r\n    link: string;\r\n    description: string;\r\n    technologies: string[];\r\n    created: Date;\r\n}\r\n\r\nexport interface GitProjects {\r\n    [project: string]: GitProject;\r\n}\r\n\r\ninterface RawProject {\r\n    name: string;\r\n    html_url: string;\r\n    description?: string;\r\n    languages_url: string;\r\n    created_at: string;\r\n    fork: boolean;\r\n}\r\n\r\ninterface RawLanguages {\r\n    [language: string]: number;\r\n}\r\n\r\ninterface GitProjectFilters {\r\n    ignoreLanguages?: string[];\r\n    addTechnologies?: string[];\r\n    appendDescription?: string;\r\n}\r\n\r\ninterface IntegrationFilters {\r\n    ignoreForks: boolean;\r\n    ignoreProjects: string[];\r\n    ignoreLanguages: string[];\r\n    projectFilters: { [project: string]: GitProjectFilters };\r\n}\r\n\r\nexport const emptyGitProject: GitProject = {\r\n    name: '',\r\n    link: '',\r\n    description: '',\r\n    technologies: [],\r\n    created: new Date()\r\n};\r\n\r\nconst splitPascalCase: RegExp = new RegExp('([a-z])([A-Z])', 'g');\r\n\r\nconst integrationFilters: IntegrationFilters = require(\"../Assets/GitProjectFilters.json\");\r\n\r\nlet gitProjects: GitProjects;\r\n\r\nasync function getTechnologies(project: RawProject, gitProjectFilters?: GitProjectFilters): Promise<string[]> {\r\n    const response: Response = await fetch(project.languages_url);\r\n    if (!response.ok) {\r\n        console.error(`There was an error trying to fetch the languages for ${project.name}`);\r\n        return [];\r\n    }\r\n\r\n    const rawLanguages: RawLanguages = await response.json();\r\n    const technologies: string[] = [];\r\n    Object.keys(rawLanguages).forEach((language: string) => {\r\n        if (!integrationFilters.ignoreLanguages.includes(language) &&\r\n            !gitProjectFilters?.ignoreLanguages?.includes(language))\r\n        {\r\n            technologies.push(language.toLowerCase());\r\n        }\r\n    });\r\n    if (gitProjectFilters?.addTechnologies) {\r\n        technologies.push(...gitProjectFilters?.addTechnologies);\r\n    }\r\n\r\n    return technologies;\r\n}\r\n\r\nasync function fetchGitProjects(): Promise<GitProject[]> {\r\n    const response: Response = await fetch('https://api.github.com/users/pumbas600/repos');\r\n    if (!response.ok) {\r\n        console.error('There was an error trying to fetch the projects from the Github API');\r\n        return [];\r\n    }\r\n\r\n    const rawProjects: RawProject[] = await response.json();\r\n    return Promise.all(\r\n        rawProjects.filter((project: RawProject): boolean => {\r\n            // Check if this project is meant to be ignored\r\n            return !integrationFilters.ignoreProjects.includes(project.name)\r\n                && (!integrationFilters.ignoreForks || !project.fork);\r\n        })\r\n        .map(async (project: RawProject): Promise<GitProject> => {\r\n            const gitProjectFilters: GitProjectFilters | undefined = integrationFilters.projectFilters[project.name];\r\n\r\n            let description: string = project.description ? project.description : '';\r\n            if (gitProjectFilters?.appendDescription)\r\n                description += gitProjectFilters.appendDescription;\r\n\r\n            const languages: string[] = await getTechnologies(project, gitProjectFilters)\r\n            return {\r\n                name: project.name.replaceAll(splitPascalCase, '$1 $2'),\r\n                link: project.html_url,\r\n                description: description,\r\n                technologies: languages,\r\n                created: new Date(project.created_at),\r\n            };\r\n        }));\r\n}\r\n\r\nexport async function getGitProjectsList(): Promise<GitProject[]> {\r\n    await getGitProjects();\r\n    return Object.entries(gitProjects)\r\n        .map(([name, gitProject]: [string, GitProject]): GitProject => gitProject);\r\n}\r\n\r\nexport async function getGitProjects(): Promise<GitProjects> {\r\n    if (!gitProjects) {\r\n        gitProjects = {};\r\n        (await fetchGitProjects())\r\n            .sort((a: GitProject, b: GitProject): number => {\r\n                return b.created.getTime() - a.created.getTime();\r\n            })\r\n            .forEach((gitProject: GitProject): void => {\r\n                gitProjects[gitProject.name] = gitProject;\r\n            });\r\n    }\r\n    return gitProjects;\r\n}\r\n\r\nexport function logGitProjects(): void {\r\n    getGitProjectsList().then((gitProjects:GitProject[]): void => {\r\n        console.log(\"\\n\\n\\nFetched git projects\");\r\n        gitProjects.forEach((gitProject: GitProject) => {\r\n            console.log(gitProject);\r\n        });\r\n    });\r\n}","export default __webpack_public_path__ + \"static/media/Selfie.cf68fd84.jpg\";","import React from 'react';\r\nimport selfie from '../../Assets/Selfie.jpg';\r\nimport ToggleSwitch from \"../ToggleSwitch\";\r\n\r\ninterface IProps {\r\n    toggleTheme: () => void;\r\n}\r\n\r\nconst Header:React.FC<IProps> = (props) => {\r\n\r\n    const onToggle = (isChecked: boolean): void => {\r\n        props.toggleTheme();\r\n    }\r\n\r\n    return (\r\n        <div className=\"header-group\">\r\n            <div className=\"header-background\">\r\n                <div className=\"header centred-body\">\r\n                    <div className=\"profile-image\">\r\n                        <img src={selfie} alt=\"Josh Jeffers\"/>\r\n                    </div>\r\n                    <div className=\"header-text\">\r\n                        <h1>Josh Jeffers</h1>\r\n                        <div className=\"profile-links\">\r\n                            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/pumbas600\">\r\n                                <i className=\"fab fa-github\"/>\r\n                            </a>\r\n                            <a href=\"mailto:joshjeffers600@gmail.com\">\r\n                                <i className=\"far fa-envelope\"/>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"header-secondary\">\r\n                <div className=\"navigation-buttons centred-body\">\r\n                    <i onClick={() => props.toggleTheme()} className=\"btn nav-button fas fa-adjust\"/>\r\n                    <a href=\"#about-me\"  className=\"nav-button link-hover-effect\">About Me</a>\r\n                    <a href=\"#education\" className=\"nav-button link-hover-effect\">Education</a>\r\n                    <a href=\"#projects\"  className=\"nav-button link-hover-effect\">Projects</a>\r\n                    <a href=\"#contact-me\"  className=\"nav-button link-hover-effect\">Contact Me</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {useState} from \"react\";\r\n\r\ninterface IProps {\r\n    onClick?: (isExpanded: boolean) => void;\r\n    tooltipText?: string;\r\n    tooltipWidthClass?: string;\r\n    initiallyExpanded?: boolean;\r\n}\r\n\r\nconst ExpandButton:React.FC<IProps> = (props) => {\r\n\r\n    const [isExpanded, setIsExpanded] = useState(props.initiallyExpanded || false);\r\n\r\n    function onClick() {\r\n        if (props.onClick)\r\n            props.onClick(!isExpanded);\r\n        setIsExpanded(!isExpanded);\r\n    }\r\n\r\n    return (\r\n        <div className={`hidden md:flex items-center ${props.tooltipText && 'tooltip'}\r\n                        ${props.tooltipWidthClass || 'default-tooltip-width'}`}\r\n             tooltip-text={props.tooltipText}>\r\n\r\n            <button onClick={onClick}\r\n                    className={`filter drop-shadow-md bg-purple-500 w-9 h-9 flex justify-center items-center\r\n                                rounded-full hover:bg-purple-600 transform active:rotate-45 transition-all \r\n                                ${isExpanded && 'rotate-45'}`}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExpandButton;","import React, { useState } from \"react\";\r\nimport { technologyIcons } from \"./ProjectHighlights\";\r\nimport { GitProject } from \"../GithubIntegration\";\r\nimport ExpandButton from \"../Utils/ExpandButton\";\r\n\r\ninterface IProps {\r\n    project: GitProject;\r\n}\r\n\r\ninterface IState {\r\n    showTechnologies: boolean;\r\n}\r\n\r\nconst Project:React.FC<IProps> = (props) => {\r\n\r\n    const [state, setState] = useState<IState>( {showTechnologies: false} )\r\n\r\n    function renderTechnologies(): JSX.Element[] {\r\n        if (props.project.technologies && props.project.technologies.length !== 0)\r\n            return props.project.technologies.map(technology => {\r\n                return (\r\n                    <img key={technology} src={technologyIcons[technology]} className=\"my-1 mr-2\" alt={technology}/>\r\n                );\r\n            });\r\n        else return (\r\n            [<p className=\"dark:text-gray-300 text-gray-700 text-base\">There are no technologies used for this project yet.</p>]\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div id={props.project.name} className=\"filter rounded-xl w-full dark:bg-gray-900 bg-gray-100 pt-4 p-5 drop-shadow-lg\">\r\n            <div className=\"flex items-baseline justify-between pb-2\">\r\n                <h2 className=\"dark:text-white text-black font-semibold text-xl md:text-2xl\">\r\n                    {props.project.name}\r\n                </h2>\r\n                <p className=\"dark:text-gray-300 text-gray-700 md:text-base text-xs\">\r\n                    {props.project.created.toLocaleString('default', { month: 'long', year: 'numeric'}) }\r\n                </p>           \r\n            </div>\r\n            <hr className=\"dark:border-white border-black\"/>\r\n            <div className=\"flex flex-row justify-between\">\r\n                <p className=\"dark:text-gray-300 text-gray-700 text-sm md:text-base py-3 md:py-5\">\r\n                    {props.project.description ? props.project.description : \"This project doesn't have a description.\"}\r\n                </p>\r\n                <ExpandButton onClick={(isExpanded: boolean): void => setState({showTechnologies: isExpanded})}\r\n                    tooltipText={state.showTechnologies ? 'Hide Technologies' : 'Show Technologies'}/>\r\n                {/*<div className=\"hidden md:flex items-center tooltip project-tooltip\"*/}\r\n                {/*     tooltip-text={}>*/}\r\n\r\n                {/*    <button onClick={() => setState({showTechnologies: !state.showTechnologies})}*/}\r\n                {/*            className={`filter drop-shadow-md bg-purple-500 w-9 h-9 flex justify-center items-center*/}\r\n                {/*                        rounded-full hover:bg-purple-600 transform active:rotate-45 transition-all */}\r\n                {/*                        ${state.showTechnologies && 'rotate-45'}`}>*/}\r\n                {/*        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">*/}\r\n                {/*            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />*/}\r\n                {/*        </svg>*/}\r\n                {/*    </button>*/}\r\n                {/*</div>*/}\r\n            </div>\r\n            {state.showTechnologies &&\r\n                <div className=\"flex flex-row flex-wrap ml-2 mb-5 py-1 pl-3 border-purple-500 border-l-4\">\r\n                    {renderTechnologies()}    \r\n                </div>\r\n            }\r\n            <div className=\"flex justify-between\">\r\n                <div>\r\n                    <button className=\"filter drop-shadow-md rounded-md bg-purple-500 p-2 w-24 mr-5 hover:bg-purple-600 transition-colors\">\r\n                        <a href=\"#projects\" className=\"text-white font-semibold\">\r\n                            More Info\r\n                        </a>\r\n                    </button>\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href={props.project.link} className=\"dark:text-white text-purple-500 font-semibold text-base github-link horizontal-link-hover-effect\">\r\n                        <i className=\"fab fa-github mr-2\"/>\r\n                        GitHub\r\n                    </a>\r\n                </div>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project;","import React from \"react\";\r\n\r\ninterface IProps {\r\n    title: string;\r\n    description?: string;\r\n}\r\n\r\nconst SectionTitle:React.FC<IProps> = (props) => {\r\n    return (\r\n        <div className=\"mb-5 md:mb-0 md:mr-5 pb-3 md:pb-0 md:pr-5 border-b-2 md:border-b-0 md:border-r-2 border-solid dark:border-white border-black\">\r\n            <div className=\"text-right\">\r\n                <h2 className=\"text-3xl font-bold dark:text-white text-black mb-3 md:mb-5\">{props.title}</h2>\r\n                <p className=\"dark:text-gray-300 text-gray-700 italic text-base\">{props.description}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SectionTitle;","import React, {useEffect, useState} from \"react\";\r\nimport Project from \"./Project\";\r\nimport {emptyGitProject, getGitProjects, GitProject, GitProjects} from \"../GithubIntegration\";\r\nimport SectionTitle from \"../Utils/SectionTitle\";\r\n\r\nexport interface IJsonProject {\r\n    name: string,\r\n    date: string,\r\n    link: string,\r\n    description: string,\r\n    languages: string[]\r\n}\r\n\r\nexport interface TechnologyIcons {\r\n    [key: string]: string;\r\n}\r\n\r\nexport const technologyIcons: TechnologyIcons = require('../../Assets/TechnologyIcons.json');\r\n\r\nconst projectHighlights: string[] = ['E-Portfolio', 'Halpbot Dashboard', 'Halpbot'];\r\n\r\nconst ProjectHighlights:React.FC = () => {\r\n\r\n    const [gitProjects, setGitProjects] = useState<GitProject[]>([]);\r\n\r\n    useEffect(() => {\r\n        if(gitProjects.length === 0)\r\n            getProjects();\r\n    }, [gitProjects.length])\r\n\r\n    const getProjects = async (): Promise<void> => {\r\n        const gitProjects: GitProjects = await getGitProjects();\r\n        if (gitProjects) {\r\n            setGitProjects(projectHighlights\r\n                .map((projectName: string): GitProject => {\r\n                    if (!gitProjects[projectName]) {\r\n                        console.error(`There was an error loading the project ${projectName}`);\r\n                        return { ...emptyGitProject, name: projectName };\r\n                    }\r\n                    else return gitProjects[projectName];\r\n                }));\r\n        }\r\n        else {\r\n            console.error('There was an error fetching the projects!')\r\n        }\r\n    }\r\n\r\n    const renderProjects = (): JSX.Element[] => {\r\n        return gitProjects.map((project: GitProject): JSX.Element => {\r\n            return (\r\n                <Project key={project.name} project={project}/>\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <section id=\"projects\" className=\"centred-body flex md:flex-row flex-col justify-between\">\r\n            <SectionTitle title={'Project Highlights'} description={'Fetched from GitHub via their REST API'}/>\r\n            <div className=\"grid grid-cols-1 gap-5\">\r\n                {renderProjects()}\r\n            </div>\r\n        </section>\r\n    );\r\n} \r\n\r\nexport default ProjectHighlights;","import React from 'react';\nimport './Styles/App.scss';\nimport Header from './Components/HomePage/Header';\nimport ProjectHighlights from './Components/HomePage/ProjectHighlights';\n\nexport interface LanguageIcons {\n  [key: string]: string\n}\n\nexport const LanguageIconLinks:LanguageIcons = require(\"./Assets/TechnologyIcons.json\");\n\n/**\n * TODO:\n *  - Dark theme changer using toggle button\n *  - Sticky header\n *  - Github requests for weekly commit data (https://medium.com/@quynh.totuan/how-to-get-the-current-week-in-javascript-9e64d45a9a08)\n *  - Github project descriptions\n *  - Language percent graph for projects\n */\n\nfunction App() {\n  const setTheme = (theme: 'light' | 'dark'): void => {\n    if (localStorage.theme)\n      document.body.classList.remove(localStorage.theme);\n\n    document.body.classList.add(theme);\n    localStorage.theme = theme;\n  }\n\n  const toggleTheme = (): void => {\n    if (localStorage.theme === 'dark')\n      setTheme('light');\n    else \n      setTheme('dark');\n  }\n  \n  if (localStorage.theme)\n    setTheme(localStorage.theme);\n  else \n    setTheme('dark');\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <Header toggleTheme={toggleTheme} />\n      </header>\n      <ProjectHighlights />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}