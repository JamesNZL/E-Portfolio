{"version":3,"sources":["Assets/Selfie.jpg","Components/Header.tsx","Components/Project.tsx","Components/GithubIntegration.tsx","Components/Projects.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","className","src","selfie","alt","target","rel","href","onClick","toggleTheme","Project","id","project","name","isLeft","created","toLocaleString","month","getFullYear","dangerouslySetInnerHTML","__html","description","technologies","map","technology","technologyIcons","link","splitPascalCase","RegExp","integrationFilters","require","gitProjects","getTechnologies","gitProjectFilters","a","fetch","languages_url","then","response","json","rawLanguages","Object","keys","forEach","language","ignoreLanguages","includes","push","toLowerCase","addTechnologies","fetchGitProjects","rawProjects","Promise","all","filter","ignoreProjects","fork","projectFilters","appendDescription","languages","replaceAll","html_url","Date","created_at","getGitProjects","length","sort","b","getTime","Theme","Projects","useState","setGitProjects","useEffect","getProjects","index","renderProjects","App","currentTheme","setTheme","theme","undefined","document","body","classList","remove","add","Dark","Light","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8a922975.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Selfie.cf68fd84.jpg\";","import React from 'react';\r\nimport selfie from '../../src/Assets/Selfie.jpg';\r\n\r\ninterface IProps {\r\n    toggleTheme: () => void;\r\n}\r\n\r\nconst Header:React.FC<IProps> = (props) => {\r\n    return (\r\n        <div className=\"header-group\">\r\n            <div className=\"header-background\">\r\n                <div className=\"header centred-body\">\r\n                    <div className=\"profile-image\">\r\n                        <img src={selfie} alt=\"Josh Jeffers\"/>\r\n                    </div>\r\n                    <div className=\"header-text\">\r\n                        <h1>Josh Jeffers</h1>\r\n                        <div className=\"profile-links\">\r\n                            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/pumbas600\">\r\n                                <i className=\"fab fa-github\"></i>\r\n                            </a>\r\n                            <a href=\"mailto:joshjeffers600@gmail.com\">\r\n                                <i className=\"far fa-envelope\"></i>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"header-secondary\">\r\n                <div className=\"navigation-buttons centred-body\"> \r\n                    <i onClick={() => props.toggleTheme()} className=\"btn nav-button fas fa-adjust\"></i>\r\n                    <a href=\"#about-me\"  className=\"nav-button link-hover-effect\">About Me</a>\r\n                    <a href=\"#education\" className=\"nav-button link-hover-effect\">Education</a>\r\n                    <a href=\"#projects\"  className=\"nav-button link-hover-effect\">Projects</a>\r\n                    <a href=\"#contact-me\"  className=\"nav-button link-hover-effect\">Contact Me</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport { technologyIcons } from \"./Projects\";\r\nimport { GitProject } from \"./GithubIntegration\";\r\n\r\ninterface IProps {\r\n    project: GitProject;\r\n    isLeft: boolean;\r\n}\r\n\r\nconst Project:React.FC<IProps> = (props) => {\r\n\r\n    const renderLanguages = (): JSX.Element[] => {\r\n        return props.project.technologies.map(technology => {\r\n            return (\r\n                <img key={technology} src={technologyIcons[technology]} className=\"language-icon\" alt={technology}/>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div id={props.project.name} className={\"content-container \" + (props.isLeft ? \"left\" : \"right\")}>\r\n            {!props.isLeft ? <div className=\"content-sidebar content-display\"/> : null}\r\n            <div className=\"content content-display\">\r\n                <div className=\"content-header\">\r\n                    <span className=\"content-title\">{props.project.name}</span>\r\n                    <span className=\"content-date\">\r\n                        <span className=\"content-month\">\r\n                            {props.project.created.toLocaleString('default', { month: 'long'})}\r\n                        </span>\r\n                        <span className=\"content-year\">{props.project.created.getFullYear()}</span>\r\n                    </span>\r\n                </div>\r\n                <hr/>\r\n                <div className=\"content-description\" dangerouslySetInnerHTML={{__html: props.project.description}}>\r\n                </div>\r\n                <div className=\"content-footer\">\r\n                    <div className=\"content-language\">\r\n                        {renderLanguages()}\r\n                    </div>\r\n                    <div className=\"content-link\">\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={props.project.link} className=\"github-link horizontal-link-hover-effect\">\r\n                            <i className=\"fab fa-github\"/>\r\n                            <span>GitHub</span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {props.isLeft ? <div className=\"content-sidebar content-display\"/> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project;","export interface GitProject {\r\n    name: string;\r\n    link: string;\r\n    description: string;\r\n    technologies: string[];\r\n    created: Date;\r\n}\r\n\r\ninterface RawProject {\r\n    name: string;\r\n    html_url: string;\r\n    description?: string;\r\n    languages_url: string;\r\n    created_at: string;\r\n    fork: boolean;\r\n}\r\n\r\ninterface RawLanguages {\r\n    [language: string]: number;\r\n}\r\n\r\ninterface GitProjectFilters {\r\n    ignoreLanguages?: string[];\r\n    addTechnologies?: string[];\r\n    appendDescription?: string;\r\n}\r\n\r\ninterface IntegrationFilters {\r\n    ignoreProjects: string[];\r\n    ignoreLanguages: string[];\r\n    projectFilters: { [project: string]: GitProjectFilters };\r\n}\r\n\r\nconst splitPascalCase: RegExp = new RegExp('([a-z])([A-Z])', 'g');\r\n\r\nconst integrationFilters: IntegrationFilters = require(\"../Assets/GitProjectFilters.json\");\r\n\r\nlet gitProjects: GitProject[] = [];\r\n\r\nasync function getTechnologies(project: RawProject, gitProjectFilters?: GitProjectFilters): Promise<string[]> {\r\n    return fetch(project.languages_url)\r\n        .then((response: Response): Promise<RawLanguages> => {\r\n            return response.json();\r\n        })\r\n        .then((rawLanguages: RawLanguages): string[] => {\r\n            const technologies: string[] = [];\r\n            Object.keys(rawLanguages).forEach((language: string) => {\r\n                if (!integrationFilters.ignoreLanguages.includes(language) &&\r\n                    !gitProjectFilters?.ignoreLanguages?.includes(language))\r\n                {\r\n                    technologies.push(language.toLowerCase());\r\n                }\r\n            });\r\n            if (gitProjectFilters?.addTechnologies) {\r\n                technologies.push(...gitProjectFilters?.addTechnologies);\r\n            }\r\n\r\n            return technologies;\r\n        });\r\n}\r\n\r\nasync function fetchGitProjects(): Promise<GitProject[]> {\r\n    return fetch('https://api.github.com/users/pumbas600/repos')\r\n        .then((response: Response): Promise<RawProject[]> => {\r\n            return response.json();\r\n        })\r\n        .then((rawProjects: RawProject[]): Promise<GitProject[]> => {\r\n            return Promise.all(\r\n                rawProjects.filter((project: RawProject): boolean => {\r\n                    // Make sure the project isn't meant to be ignored\r\n                    return !integrationFilters.ignoreProjects.includes(project.name)\r\n                        && !project.fork;\r\n                })\r\n                .map(async (project: RawProject): Promise<GitProject> => {\r\n                    const gitProjectFilters: GitProjectFilters | undefined = integrationFilters.projectFilters[project.name];\r\n\r\n                    let description: string = project.description ? project.description : '';\r\n                    if (gitProjectFilters?.appendDescription)\r\n                        description += gitProjectFilters.appendDescription;\r\n\r\n                    return getTechnologies(project, gitProjectFilters)\r\n                        .then((languages: string[]): GitProject => {\r\n                            return {\r\n                                name: project.name.replaceAll(splitPascalCase, '$1 $2'),\r\n                                link: project.html_url,\r\n                                description: description,\r\n                                technologies: languages,\r\n                                created: new Date(project.created_at),\r\n                            };\r\n                        });\r\n                }));\r\n        });\r\n}\r\n\r\nexport async function getGitProjects(): Promise<GitProject[]> {\r\n    if (gitProjects.length === 0)\r\n        gitProjects = (await fetchGitProjects())\r\n                .sort((a: GitProject, b: GitProject): number => {\r\n                    return b.created.getTime() - a.created.getTime();\r\n                });\r\n    return gitProjects;\r\n}\r\n\r\nexport function logGitProjects(): void {\r\n    getGitProjects().then((gitProjects:GitProject[]): void => {\r\n        console.log(\"\\n\\n\\nFetched git projects\");\r\n        gitProjects.forEach((gitProject: GitProject) => {\r\n            console.log(gitProject);\r\n        });\r\n    });\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport Project from \"./Project\";\r\nimport {getGitProjects, GitProject} from \"./GithubIntegration\";\r\n\r\nexport interface IJsonProject {\r\n    name: string,\r\n    date: string,\r\n    link: string,\r\n    description: string,\r\n    languages: string[]\r\n}\r\n\r\nexport interface TechnologyIcons {\r\n    [key: string]: string;\r\n}\r\n\r\nexport const technologyIcons: TechnologyIcons = require('../Assets/TechnologyIcons.json');\r\n//const JsonProjects: IJsonProject[] = require('../Assets/Projects.json');\r\n\r\nconst Projects:React.FC = () => {\r\n\r\n    const [gitProjects, setGitProjects] = useState<GitProject[]>([]);\r\n\r\n    useEffect(() => {\r\n        if(gitProjects.length === 0)\r\n            getProjects();\r\n    }, [gitProjects.length])\r\n\r\n    const getProjects = async (): Promise<void> => {\r\n        setGitProjects(await getGitProjects());\r\n    }\r\n\r\n    const renderProjects = (): JSX.Element[] => {\r\n        let index: number = 0;\r\n        return gitProjects.map((project: GitProject): JSX.Element => {\r\n            return (\r\n                <Project key={project.name} project={project} isLeft={index++ % 2 === 0}/>\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <section id=\"projects\" className=\"centred-body\">\r\n            <h1>Projects</h1>\r\n            {renderProjects()}\r\n        </section>\r\n    )\r\n} \r\n\r\nexport default Projects;","import React from 'react';\nimport './Styles/App.scss';\nimport Header from './Components/Header';\nimport Projects from './Components/Projects';\n\nexport interface LanguageIcons {\n  [key: string]: string\n}\n\nexport const LanguageIconLinks:LanguageIcons = require(\"./Assets/TechnologyIcons.json\");\n\nexport enum Theme {\n  Light = 'light',\n  Dark = 'dark'\n}\n\nfunction App() {\n  let currentTheme: Theme;\n\n  const setTheme = (theme: Theme): void => {\n    if (currentTheme !== undefined) {\n      document.body.classList.remove(currentTheme);\n    }\n    document.body.classList.add(theme);\n    currentTheme = theme;\n  }\n\n  const toggleTheme = (): void => {\n    if (currentTheme === Theme.Dark)\n      setTheme(Theme.Light);\n    else \n      setTheme(Theme.Dark);\n  }\n\n  setTheme(Theme.Dark);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header toggleTheme={toggleTheme} />\n        <Projects />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}